//
//  MediaDetailViewController.swift
//  FinancialHouse
//
//  Created by Olgu on 18.10.2020.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MediaDetailDisplayLogic: AnyObject {
    func displayMedia(viewModel: MediaDetail.ShowMedia.ViewModel)
}

final class MediaDetailViewController: UIViewController, MediaDetailDisplayLogic {
    
    // MARK: - IBOutlet
    
    @IBOutlet fileprivate weak var mediaImageView: UIImageView!
    @IBOutlet fileprivate weak var mediaTitle: UILabel!
        
    var interactor: MediaDetailBusinessLogic?
    var router: (NSObjectProtocol & MediaDetailRoutingLogic & MediaDetailDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = MediaDetailInteractor()
        let presenter = MediaDetailPresenter()
        let router = MediaDetailRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        configurePassedDataItemWorker()
    }
    
    private func configurePassedDataItemWorker() {
        let request = MediaDetail.ShowMedia.Request()
        interactor?.getItem(request: request)
    }
    
    // MARK: MediaDetailDisplayLogic
        
    func displayMedia(viewModel: MediaDetail.ShowMedia.ViewModel) {
        mediaTitle.text = viewModel.displayedMedia.mediaName
        mediaImageView.setImage(urlString: viewModel.displayedMedia.mediaArtworkUrl)
    }
}
