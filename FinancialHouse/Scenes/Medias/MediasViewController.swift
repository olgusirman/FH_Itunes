//
//  MediasViewController.swift
//  FinancialHouse
//
//  Created by Olgu on 17.10.2020.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MediasDisplayLogic: AnyObject {
    func displaySomething(viewModel: Medias.Something.ViewModel)
}

final class MediasViewController: BaseViewController, MediasDisplayLogic {
    
    @IBOutlet fileprivate weak var searchBar: UISearchBar!
    @IBOutlet fileprivate weak var collectionView: UICollectionView!
    
    var interactor: MediasBusinessLogic?
    var router: (NSObjectProtocol & MediasRoutingLogic & MediasDataPassing)?

    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = MediasInteractor()
        let presenter = MediasPresenter()
        let router = MediasRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    var items: [ItunesItem]?
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setup()
        doSomething()
        configureUI()
        
        ItunesNetworkManager().searchMedia { (items, error) in
            
            DispatchQueue.main.async {
                self.items = items
                self.collectionView.reloadData()
            }
        }
    }
    
    private func configureUI() {
        collectionView.register(cellType: MediaCell.self)
        collectionView.dataSource = self
        collectionView.delegate = self
        
        searchBar.delegate = self
    }
    
    // MARK: Do something
        
    func doSomething() {
        let request = Medias.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: Medias.Something.ViewModel) {
        //nameTextField.text = viewModel.name
    }
}


extension MediasViewController: UICollectionViewDataSource {
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return items?.count ?? 0
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        
        let cell = collectionView.dequeueReusableCell(withCellType: MediaCell.self, forIndexPath: indexPath)
        let item = items?[indexPath.item]
        if let item = item {
            cell.configure(item: item)
        }
        return cell
    }
    
}

extension MediasViewController: UICollectionViewDelegate {

    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        debugPrint("\(#function) \(indexPath.item)")
        ////        presenter?.didChangeQuery(searchController.searchBar.text)
    }
    
}

extension MediasViewController: UISearchBarDelegate {

    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        debugPrint(searchText)
    }
    
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        
    }
    
    func searchBarCancelButtonClicked(_ searchBar: UISearchBar) {
        
    }
}
