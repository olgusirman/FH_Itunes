//
//  MediasViewController.swift
//  FinancialHouse
//
//  Created by Olgu on 17.10.2020.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MediasDisplayLogic: AnyObject {
    func displayItems(viewModel: Medias.FetchMedias.ViewModel)
}
final class MediasViewController: BaseViewController, MediasDisplayLogic {
    
    @IBOutlet fileprivate weak var searchBar: UISearchBar!
    @IBOutlet fileprivate weak var collectionView: UICollectionView!
    
    fileprivate var interactor: MediasBusinessLogic?
    fileprivate var router: (NSObjectProtocol & MediasRoutingLogic & MediasDataPassing)?
    fileprivate var viewModel: Medias.FetchMedias.ViewModel?
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = MediasInteractor()
        let presenter = MediasPresenter()
        let router = MediasRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
        
    override func viewDidLoad() {
        super.viewDidLoad()
        setup()
        fetchMedias()
        configureUI()
    }
    
    private func configureUI() {
        collectionView.register(cellType: MediaCell.self)
        collectionView.dataSource = self
        collectionView.delegate = self
        
        searchBar.delegate = self
    }
    
    // MARK: - Interactor
        
    private func fetchMedias(query: String = "") {
        let request = Medias.FetchMedias.Request(term: query, media: .all)
        interactor?.fetchMedias(request: request)
    }
    
    func displayItems(viewModel: Medias.FetchMedias.ViewModel) {
        self.viewModel = viewModel
        collectionView.reloadData()
    }
}


extension MediasViewController: UICollectionViewDataSource {
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return viewModel?.displayedMedias.count ?? 0
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        
        let cell = collectionView.dequeueReusableCell(withCellType: MediaCell.self, forIndexPath: indexPath)
        let item = viewModel?.displayedMedias[indexPath.item]
        if let item = item {
            cell.configure(item: item)
        }
        return cell
    }
    
}

extension MediasViewController: UICollectionViewDelegate {

    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        debugPrint("\(#function) \(indexPath.item)")
        //interactor?...
        ////        presenter?.didChangeQuery(searchController.searchBar.text)
        //router.... ??
    }
    
}

extension MediasViewController: UISearchBarDelegate {

    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        fetchMedias(query: searchText)
    }
    
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        guard let query = searchBar.text, !query.isEmpty else {
            return
        }
        fetchMedias(query: query)
    }
}
